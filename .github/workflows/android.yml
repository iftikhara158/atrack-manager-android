name: Build Android APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Gradle daemon is disabled to avoid leftover processes
      _JAVA_OPTIONS: "-Xmx1536m"
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Install prerequisites & Android SDK cmdline tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget unzip
          # Download command-line tools (specific stable build)
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          mkdir -p $HOME/android-sdk/cmdline-tools
          unzip -q cmdline-tools.zip -d $HOME/android-sdk/cmdline-tools
          # move to 'latest' to match expected layout
          mv $HOME/android-sdk/cmdline-tools/cmdline-tools $HOME/android-sdk/cmdline-tools/latest
          # Expose Android env vars for subsequent steps
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          # Make the cmdline-tools bin and platform-tools available in PATH for subsequent steps
          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH
          # Ensure sdkmanager is callable in this step (use absolute path)
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
          # Install the Android platforms and build tools typically required.
          # Adjust versions if your project uses others (e.g., android-31 / build-tools;31.x.x)
          $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.2"

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable & show Java info
        run: |
          chmod +x ./gradlew
          java -version
          ./gradlew -v

      - name: Build Debug APK
        run: |
          ./gradlew assembleDebug --no-daemon

      - name: Upload Debug APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: atrack-debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk

      - name: Build Release (unsigned) APK
        run: |
          ./gradlew assembleRelease --no-daemon

      - name: Upload unsigned Release APK
        uses: actions/upload-artifact@v4
        with:
          name: atrack-release-unsigned-apk
          path: app/build/outputs/apk/release/app-release-unsigned.apk

      - name: Zipalign + Sign Release APK (optional, runs only if keystore secret provided)
        if: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          set -e
          export ANDROID_HOME=$HOME/android-sdk
          BUILD_TOOLS_VERSION=33.0.2
          BUILD_TOOLS=$ANDROID_HOME/build-tools/$BUILD_TOOLS_VERSION
          # Decode keystore from secret
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > release.keystore
          # Align the unsigned apk (zipalign is part of build-tools)
          $BUILD_TOOLS/zipalign -v -p 4 app/build/outputs/apk/release/app-release-unsigned.apk app/build/outputs/apk/release/app-release-unsigned-aligned.apk
          # Sign the aligned APK using apksigner
          $BUILD_TOOLS/apksigner sign \
            --ks release.keystore \
            --ks-key-alias "${{ secrets.KEYSTORE_ALIAS }}" \
            --ks-pass pass:${{ secrets.KEYSTORE_PASSWORD }} \
            --key-pass pass:${{ secrets.KEY_PASSWORD }} \
            --out app/build/outputs/apk/release/app-release-signed.apk \
            app/build/outputs/apk/release/app-release-unsigned-aligned.apk

      - name: Upload signed Release APK (only if signed)
        if: ${{ secrets.KEYSTORE_BASE64 }}
        uses: actions/upload-artifact@v4
        with:
          name: atrack-release-signed-apk
          path: app/build/outputs/apk/release/app-release-signed.apk
